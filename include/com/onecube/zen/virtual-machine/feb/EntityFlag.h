/*
 * Copyright 2017-2020 Samuel Rowe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Saturday, April 28, 2018

#ifndef ZEN_FEB_ENTITY_FLAG_H
#define ZEN_FEB_ENTITY_FLAG_H

#include <com/onecube/zen/Configuration.h>

/*******************************************************************************
 * EntityFlag                                                                  *
 *******************************************************************************/

enum zen_EntityFlag_t {
    /**
     * The entity may be accessed from outside the enclosing package.
     *
     * This flag is mutually exclusive of the following flags:
     *     - ZEN_ENTITY_FLAG_PRIVATE
     *     - ZEN_ENTITY_FLAG_PROTECTED
     *     - ZEN_ENTITY_FLAG_PACKAGE_ONLY
     */
    ZEN_ENTITY_FLAG_PUBLIC = (1 << 0),

    /**
     * The entity may be accessed only by the members of the enclosing class.
     *
     * This flag is mutually exclusive of the following flags:
     *     - ZEN_ENTITY_FLAG_PUBLIC
     *     - ZEN_ENTITY_FLAG_PROTECTED
     *     - ZEN_ENTITY_FLAG_PACKAGE_ONLY
     */
    ZEN_ENTITY_FLAG_PRIVATE = (1 << 1),

    /**
     * The entity may be accessed by the members of the enclosing class and
     * all its subclasses.
     *
     * This flag is mutually exclusive of the following flags:
     *     - ZEN_ENTITY_FLAG_PUBLIC
     *     - ZEN_ENTITY_FLAG_PRIVATE
     *     - ZEN_ENTITY_FLAG_PACKAGE_ONLY
     */
    ZEN_ENTITY_FLAG_PROTECTED = (1 << 2),

    /**
     * The entity may be accessed only within the enclosing package.
     *
     * This flag is mutually exclusive of the following flags:
     *     - ZEN_ENTITY_FLAG_PUBLIC
     *     - ZEN_ENTITY_FLAG_PRIVATE
     *     - ZEN_ENTITY_FLAG_PROTECTED
     */
    ZEN_ENTITY_FLAG_PACKAGE_ONLY = (1 << 3),

    /**
     * The entity has partial or no implementation at all. Therefore, the
     * class associated with this entity cannot be instantiated.
     *
     * CASE i: Entity is a function.
     *         The function has no implementation. This prevents the instantiation
     *         of its class.
     * CASE ii: Entity is a class.
     *         The class has one or more abstract functions. Therefore, the
     *         class cannot be instantiated.
     *
     * This flag is mutually exclusive of the following flags:
     *     - ZEN_ENTITY_FLAG_FINAL
     */
    ZEN_ENTITY_FLAG_ABSTRACT = (1 << 4),

    /**
     * The entity cannot be extended further.
     *
     * CASE i: Entity is a function.
     *         The subclass of the enclosing class cannot be override this
     *         function. The implementation of this function is final.
     * CASE ii: Entity is a class.
     *         The implementation of the class is final. It cannot be extended
     *         to implement other features.
     *
     * This flag is mutually exclusive of the following flags:
     *     - ZEN_ENTITY_FLAG_FINAL
     */
    ZEN_ENTITY_FLAG_FINAL = (1 << 5),

    /**
     * The entity is a function with no implementation.
     */
    ZEN_ENTITY_FLAG_NATIVE = (1 << 6),

    /**
     * The entity was generated by the compiler.  It is not present in the
     * source code.
     */
    ZEN_ENTITY_FLAG_SYNTHETIC = (1 << 7),

    /**
     * The entity has no explicit name within the source code. This flag does
     * not cause the virtual machine to treat the entity specially. It merely
     * indicates its anonymity. A higher level of abstraction, such as the
     * reflection API, may employ bthis flag for creative designs.
     */
    ZEN_ENTITY_FLAG_ANONYMOUS = (1 << 8),

    /**
     * The entity is a function or a constructor which accepts variable number
     * of arguments. This flag does not cause the virtual machine to treat
     * the entity specially. It merely indicates the acceptance of variable
     * arguments. A higher level of abstraction, such as the reflection API,
     * may employ this flag for creative designs.
     */
    ZEN_ENTITY_FLAG_VARIABLE_ARGUMENTS = (1 << 9),

    ZEN_ENTITY_FLAG_VOLATILE = (1 << 10),

    ZEN_ENTITY_FLAG_TRANSIENT = (1 << 11),

    /**
     * The entity is available without instantiating its enclosing class.
     */
    ZEN_ENTITY_FLAG_STATIC = (1 << 12)
};

typedef enum zen_EntityFlag_t zen_EntityFlag_t;

#endif /* ZEN_FEB_ENTITY_FLAG_H */